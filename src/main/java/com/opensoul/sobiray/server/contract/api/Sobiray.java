package com.opensoul.sobiray.server.contract.api;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tuples.generated.Tuple9;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.4.0.
 */
public class Sobiray extends Contract {
    private static final String BINARY = "";

    public static final String FUNC_SETEVENTSTATUS = "setEventStatus";

    public static final String FUNC_GUESTPAID = "guestPaid";

    public static final String FUNC_ADDGUEST = "addGuest";

    public static final String FUNC_GETEVENTSUMS = "getEventSums";

    public static final String FUNC_GETEVENTIDS = "getEventIds";

    public static final String FUNC_CHECKENDPRESALE = "checkEndPresale";

    public static final String FUNC_ADDEVENT = "addEvent";

    public static final String FUNC_GETGUEST = "getGuest";

    public static final String FUNC_STARTPRESALE = "startPresale";

    public static final String FUNC_GETEVENTSTATUS = "getEventStatus";

    public static final String FUNC_CANCELPRESALE = "cancelPresale";

    public static final String FUNC_GETEVENT = "getEvent";

    public static final String FUNC_SUCCESSPRESALE = "successPresale";

    public static final String FUNC_FAILPRESALE = "failPresale";

    public static final String FUNC_GETEVENTPRICES = "getEventPrices";

    public static final String FUNC_GETEVENTGUESTSIDS = "getEventGuestsIds";

    protected Sobiray(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Sobiray(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public RemoteCall<TransactionReceipt> setEventStatus(String evId, BigInteger status) {
        final Function function = new Function(
                FUNC_SETEVENTSTATUS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(evId), 
                new org.web3j.abi.datatypes.generated.Uint8(status)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> guestPaid(String eventId, String guestId) {
        final Function function = new Function(
                FUNC_GUESTPAID, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(eventId), 
                new org.web3j.abi.datatypes.Utf8String(guestId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addGuest(String eventId, String guestId, String transactionId) {
        final Function function = new Function(
                FUNC_ADDGUEST, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(eventId), 
                new org.web3j.abi.datatypes.Utf8String(guestId), 
                new org.web3j.abi.datatypes.Utf8String(transactionId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple3<String, BigInteger, BigInteger>> getEventSums(String evId) {
        final Function function = new Function(FUNC_GETEVENTSUMS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(evId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple3<String, BigInteger, BigInteger>>(
                new Callable<Tuple3<String, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple3<String, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<String, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue());
                    }
                });
    }

    public RemoteCall<List> getEventIds() {
        final Function function = new Function(FUNC_GETEVENTIDS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<TransactionReceipt> checkEndPresale(String eventId) {
        final Function function = new Function(
                FUNC_CHECKENDPRESALE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(eventId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addEvent(String eventId, BigInteger successSum, BigInteger maxGuestsCount, BigInteger presalePrice, BigInteger salePrice, BigInteger fundingDeadline, BigInteger eventDate) {
        final Function function = new Function(
                FUNC_ADDEVENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(eventId), 
                new org.web3j.abi.datatypes.generated.Uint256(successSum), 
                new org.web3j.abi.datatypes.generated.Uint256(maxGuestsCount), 
                new org.web3j.abi.datatypes.generated.Uint256(presalePrice), 
                new org.web3j.abi.datatypes.generated.Uint256(salePrice), 
                new org.web3j.abi.datatypes.generated.Uint256(fundingDeadline), 
                new org.web3j.abi.datatypes.generated.Uint256(eventDate)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple4<String, String, BigInteger, String>> getGuest(String eventId, String guestId) {
        final Function function = new Function(FUNC_GETGUEST, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(eventId), 
                new org.web3j.abi.datatypes.Utf8String(guestId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple4<String, String, BigInteger, String>>(
                new Callable<Tuple4<String, String, BigInteger, String>>() {
                    @Override
                    public Tuple4<String, String, BigInteger, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<String, String, BigInteger, String>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (String) results.get(3).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> startPresale(String eventId) {
        final Function function = new Function(
                FUNC_STARTPRESALE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(eventId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getEventStatus(String eventId) {
        final Function function = new Function(FUNC_GETEVENTSTATUS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(eventId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> cancelPresale(String eventId) {
        final Function function = new Function(
                FUNC_CANCELPRESALE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(eventId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple9<BigInteger, String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>> getEvent(String evId) {
        final Function function = new Function(FUNC_GETEVENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(evId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple9<BigInteger, String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>(
                new Callable<Tuple9<BigInteger, String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple9<BigInteger, String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple9<BigInteger, String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue(), 
                                (BigInteger) results.get(7).getValue(), 
                                (BigInteger) results.get(8).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> successPresale(String eventId) {
        final Function function = new Function(
                FUNC_SUCCESSPRESALE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(eventId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> failPresale(String eventId) {
        final Function function = new Function(
                FUNC_FAILPRESALE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(eventId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple3<String, BigInteger, BigInteger>> getEventPrices(String evId) {
        final Function function = new Function(FUNC_GETEVENTPRICES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(evId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple3<String, BigInteger, BigInteger>>(
                new Callable<Tuple3<String, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple3<String, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<String, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue());
                    }
                });
    }

    public RemoteCall<List> getEventGuestsIds(String eventId) {
        final Function function = new Function(FUNC_GETEVENTGUESTSIDS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(eventId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public static RemoteCall<Sobiray> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Sobiray.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<Sobiray> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Sobiray.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static Sobiray load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Sobiray(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static Sobiray load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Sobiray(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }
}
